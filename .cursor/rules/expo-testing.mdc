---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
 # Expo React Native Testing Standards

## Context
- Applied to all test files in Expo React Native projects
- Covers unit, component, integration, and E2E testing
- Ensures consistent testing practices across the codebase

## Requirements

### Test File Organization
- Test files must be co-located with source files using `.test.{ts,tsx}` extension
- E2E tests must be placed in `e2e/` directory using `.spec.{ts,tsx}` extension
- Test utilities must be placed in `__tests__/utils/` directory

### Test Structure
- Each test file must have a clear describe block indicating the component/module
- Test descriptions must follow "Given/When/Then" pattern
- Mock data must be defined in separate files under `__mocks__/` directory

### Unit Testing
- All utility functions must have unit tests with >80% coverage
- Use Jest and React Native Testing Library for unit tests
- Mock external dependencies and API calls
- Include positive and negative test cases

### Component Testing
- All React components must have snapshot tests
- Test component rendering with different props
- Verify component interactions and state changes
- Use data-testid for component queries

<example>
```typescript
import { render, fireEvent } from '@testing-library/react-native';
import { SearchBar } from './SearchBar';

describe('SearchBar', () => {
  it('should update search text on input', () => {
    const { getByTestId } = render(<SearchBar />);
    const input = getByTestId('search-input');
    fireEvent.changeText(input, 'test');
    expect(input.props.value).toBe('test');
  });
});
```
</example>

### Integration Testing
- Test component interactions and data flow
- Verify navigation flows using Expo Router testing utilities
- Test API integration with mock responses
- Validate state management logic

<example>
```typescript
import { renderRouter } from '@expo-router/testing-library';

describe('Navigation Flow', () => {
  it('should navigate to search on button press', async () => {
    const { getByTestId, router } = renderRouter();
    const searchButton = getByTestId('search-button');
    fireEvent.press(searchButton);
    expect(router).toHavePathname('/search');
  });
});
```
</example>

### E2E Testing
- Use Maestro for E2E testing
- Write tests in YAML format
- Cover critical user flows
- Test on both iOS and Android platforms

<example>
```yaml
appId: com.airbnb.clone
---
- launchApp
- tapOn:
    id: "search-button"
- assertVisible:
    text: "Search Properties"
```
</example>

### CI/CD Integration
- Configure EAS Build for automated testing
- Run unit and integration tests on every PR
- Execute E2E tests before releases
- Generate and track code coverage reports

<example>
```yaml
# .eas/workflows/test.yml
name: Test
on:
  pull_request:
    branches: [main]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install
      - run: npm test
      - run: npm run test:e2e
```
</example>

<critical>
- NEVER skip writing tests for new features or components
- ALWAYS maintain test coverage above 80%
- ENSURE all tests pass before merging PRs
- KEEP test files organized and well-documented
</critical>

<version>1.0.0</version>
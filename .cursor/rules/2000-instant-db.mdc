----
description: 
globs: *.tsx,*.ts
alwaysApply: false
----
# InstantDB CRUD Operation Patterns

## Context
- When writing database queries and mutations
- When implementing real-time data operations
- When handling relationships between entities
- When optimizing query performance
- When implementing error handling
- When managing schema migrations
- When handling concurrent updates
- When implementing batch operations

## Requirements

### Query Decision Tree
- Use single query when:
  - Data is shallow (1-2 levels deep)
  - All fields are needed immediately
  - Real-time updates required

- Split into multiple queries when:
  - Deep nested relationships (>2 levels)
  - Partial data loading needed
  - Different update frequencies
  - Performance optimization needed

### Mutation Decision Tree
- Use single transaction when:
  - Operations must be atomic
  - Related entities need sync
  - Rollback required on failure

- Use separate mutations when:
  - Operations can be independent
  - Optimistic updates needed
  - Different error handling required

### Examples

<example>
```typescript
// Good: Single query for shallow data
const { data } = db.useQuery({
  listings: {
    $: { 
      where: { status: "active" },
      order: { createdAt: "desc" },
      limit: 10
    }
  }
});

// Good: Split queries for different update frequencies
const { data: basicInfo } = db.useQuery({
  profile: {
    $: { where: { userId } }
  }
});

const { data: stats } = db.useQuery({
  profileStats: {
    $: { where: { userId } }
  }
});

// Good: Atomic transaction for related updates
await db.transact([
  db.tx.booking[bookingId].update({ status: "confirmed" }),
  db.tx.listing[listingId].update({ availability: "booked" }),
  (result) => db.tx.notification.create({ 
    type: "booking_confirmed",
    bookingId: result.id 
  })
]);
```
</example>

<example type="invalid">
```typescript
// Bad: Redundant field declarations
const { data } = db.useQuery({
  users: {
    $: { where: { status: "active" } },
    name: true,    // Redundant
    email: true,   // Redundant
    profile: true  // Redundant
  }
});

// Bad: Single deep query causing performance issues
const { data } = db.useQuery({
  users: {
    profile: {
      posts: {
        comments: {
          author: {
            profile: {} // Even empty object is not needed
          }
        }
      }
    }
  }
});

// Bad: Separate transactions that should be atomic
await db.tx.booking[id].update({ status: "confirmed" });
await db.tx.listing[id].update({ availability: "booked" });
await db.tx.notification.create({ type: "booking_confirmed" });
```
</example>

### Performance Patterns

<example>
```typescript
// Good: Optimized query with pagination
function usePagedData(page: number) {
  return db.useQuery({
    items: {
      $: {
        where: { status: "active" },
        limit: 20,
        skip: page * 20,
        order: { createdAt: "desc" }
      }
    }
  });
}

// Good: Optimistic update with error handling
async function toggleFavorite(itemId: string) {
  try {
    // Optimistic update in UI
    setFavorited(prev => !prev);
    
    await db.transact([
      db.tx.favorites.create({
        itemId,
        userId: currentUser,
        createdAt: new Date().toISOString()
      })
    ]);
  } catch (error) {
    // Revert optimistic update
    setFavorited(prev => !prev);
    throw error;
  }
}
```
</example>

### Error Handling and Validation

<example>
```typescript
// Good: Comprehensive error handling
async function createListing(data: ListingData) {
  try {
    const result = await db.transact(
      db.tx.listings[id()].update(data)
    );
    return { success: true, data: result };
  } catch (error) {
    if (error.code === 'VALIDATION_ERROR') {
      return { success: false, error: 'Invalid listing data' };
    } else if (error.code === 'NETWORK_ERROR') {
      return { success: false, error: 'Connection issues' };
    }
    return { success: false, error: 'Unknown error' };
  }
}

// Good: Schema validation
const schema = i.schema({
  version: '1.0.0',
  entities: {
    listings: i.entity({
      title: i.string().required().min(3).max(100),
      price: i.number().required().min(0),
      description: i.string().max(1000),
      validate: (data) => {
        if (data.price === 0 && !data.isFree) {
          throw new Error('Free listings must be marked as free');
        }
      }
    })
  }
});
```
</example>

### Batch Operations

<example>
```typescript
// Good: Batch operations with progress tracking
async function importListings(listings: ListingData[]) {
  const batchSize = 100;
  const batches = [];
  let processed = 0;

  // Create batches
  for (let i = 0; i < listings.length; i += batchSize) {
    batches.push(listings.slice(i, i + batchSize));
  }

  // Process batches
  for (const batch of batches) {
    try {
      await db.transact(
        batch.map(listing => 
          db.tx.listings[id()].update(listing)
        )
      );
      processed += batch.length;
      onProgress?.(processed / listings.length);
    } catch (error) {
      console.error(`Batch failed at ${processed} items`);
      throw error;
    }
  }
}
```
</example>

### Real-time Subscriptions

<example>
```typescript
// Good: Real-time data handling with cleanup
function useRealtimeListing(listingId: string) {
  const { data, isLoading } = db.useQuery({
    listings: { 
      $: { where: { id: listingId } }
    }
  });

  useEffect(() => {
    const unsubscribe = db.subscribe(
      { listings: { id: listingId } },
      (updates) => {
        // Handle real-time updates
        if (updates.type === 'update') {
          handleListingUpdate(updates.data);
        } else if (updates.type === 'delete') {
          handleListingDeletion();
        }
      }
    );

    return () => unsubscribe();
  }, [listingId]);

  return { listing: data?.listings?.[0], isLoading };
}
```
</example>

### Conflict Resolution

<example>
```typescript
// Good: Handling concurrent updates
async function updateListingWithLock(listingId: string, updates: any) {
  const { version } = await db.query({
    listings: { 
      $: { where: { id: listingId } },
      select: ['version']
    }
  });

  try {
    await db.transact(
      db.tx.listings[listingId]
        .merge(updates)
        .where({ version }) // Optimistic locking
    );
  } catch (error) {
    if (error.code === 'CONFLICT') {
      const current = await db.query({
        listings: { $: { where: { id: listingId } } }
      });
      const merged = mergeStrategy(updates, current);
      return updateListingWithLock(listingId, merged);
    }
    throw error;
  }
}
```
</example>

<critical>
- NEVER add redundant field declarations (field: true)
- CHOOSE single query for shallow, real-time data
- SPLIT queries for deep relationships or different update frequencies
- USE transactions for related entity updates
- IMPLEMENT optimistic updates for better UX
- HANDLE errors with proper rollback
- OPTIMIZE queries with pagination
- IMPLEMENT proper cleanup for subscriptions
- USE batch operations for bulk updates
- HANDLE concurrent updates with version control
- VALIDATE data at schema level
- IMPLEMENT comprehensive error handling
</critical>

<version>2.6.0</version> 
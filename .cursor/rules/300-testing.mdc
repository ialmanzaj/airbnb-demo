---
description: Define testing standards for React Native projects using Jest and Maestro to ensure code quality and maintainability.
globs: __tests__/**/*.{ts,tsx},*.maestro,*.yaml,__mocks__/**/*
alwaysApply: false
---

# React Native Testing Standards

## Test Organization
- Locate unit and integration test files within the central `__tests__/` directory. Use the `.test.{ts,tsx}` extension.
  - Place component tests in `__tests__/components/`.
  - Place hook tests in `__tests__/hooks/`.
  - Store common test utilities and helpers in `__tests__/utils/`.
  - Configure global test setup (e.g., mocks, environment) in `__tests__/setup.ts`.
- Place E2E tests in the root `.maestro/` directory using `.maestro` files (or `.yaml` if preferred).
- Organize mock data files within a root `__mocks__/` directory, potentially subdivided by feature.
- Maintain minimum 80% code coverage across all test types.

## Testing Types and Examples

### Unit Testing

#### Components and Hooks
```typescript
// Component Test
describe('Button', () => {
  const setup = (props = {}) => render(<Button label="Click me" {...props} />);

  it('renders and handles interactions', () => {
    // Arrange
    const onPress = jest.fn();
    const { getByText } = setup({ onPress });
    
    const button = getByText('Click me');
    expect(button).toBeTruthy();

    // Act
    fireEvent.press(button);

    // Assert
    expect(onPress).toHaveBeenCalled();
  });

  it('handles states correctly', () => {
    const { getByTestId } = setup({ disabled: true, variant: 'primary' });
    expect(getByTestId('button-primary-disabled')).toBeTruthy();
  });
});

// Hook Test
describe('useDataFetching', () => {
  beforeEach(() => jest.useFakeTimers());
  afterEach(() => jest.useRealTimers());

  it('manages data lifecycle', async () => {
    // Arrange
    const { result } = renderHook(() => useDataFetching());

    expect(result.current.loading).toBe(true); // Initial assert/check

    // Act
    await act(async () => {
      await result.current.fetchData();
      jest.runAllTimers();
    });

    // Assert
    expect(result.current.data).toBeDefined();
    expect(result.current.loading).toBe(false);
  });
});
```

Key Points:
- Test rendering and interactions
- Verify state changes and lifecycle
- Mock external dependencies
- Test error boundaries
- Validate accessibility
- Test effect cleanup
- Check performance optimizations

### Integration Testing
```typescript
describe('LoginFlow', () => {
  const mockApi = {
    login: jest.fn(),
    validateSession: jest.fn(),
  };

  it('handles complete login flow', async () => {
    const { getByTestId, findByText } = render(
      <AppProvider api={mockApi}>
        <LoginScreen />
      </AppProvider>
    );

    // Input credentials
    fireEvent.changeText(getByTestId('email'), 'test@example.com');
    fireEvent.changeText(getByTestId('password'), 'password123');
    
    // Submit
    mockApi.login.mockResolvedValueOnce({ token: 'test-token' });
    fireEvent.press(getByTestId('submit'));

    // Verify success
    expect(await findByText('Welcome')).toBeTruthy();
    expect(mockApi.validateSession).toHaveBeenCalledWith('test-token');
  });

  it('handles errors gracefully', async () => {
    mockApi.login.mockRejectedValueOnce(new Error('Invalid credentials'));
    // ... test error handling
  });
});
```

Key Points:
- Test component interactions
- Verify data flow
- Test navigation
- Handle async operations
- Mock API responses
- Test error scenarios
- Validate state management

### E2E Testing (Maestro)
```yaml
# login_flow.spec.yaml
appId: com.myapp
---
- launchApp
- assertVisible: "Login"
- tapOn:
    id: "email-input"
- inputText: "test@example.com"
- tapOn:
    id: "password-input"
- inputText: "password123"
- tapOn:
    id: "login-button"
- assertVisible: "Welcome"
- tapOn:
    id: "profile-tab"
- assertVisible: "Profile"
```

Key Points:
- Test full user flows
- Verify app state
- Test offline modes
- Check data persistence
- Validate navigation
- Test real API integration

### Snapshot Testing
- Use snapshot tests sparingly, primarily for verifying the structure of static UI components.
- Avoid snapshots for components with complex logic or frequently changing content.
- Always review snapshot changes carefully before committing. Ensure changes are intentional and correct.
- Consider visual regression testing as an alternative for complex UI verification.

### Mocking Dependencies
- Use `jest.mock()` for mocking modules, especially third-party libraries or native modules.
- Place manual mocks for complex modules within the `__mocks__/` directory.
- Mock external API calls using tools like `msw` (Mock Service Worker) or `jest.spyOn(global, 'fetch')`.
- Ensure mocks accurately reflect the expected API contracts.
- Commonly mocked modules: `react-native-permissions`, `@react-native-async-storage/async-storage`, `@react-navigation/*`.

## Best Practices

### Test Structure
```typescript
describe('ComponentName', () => {
  // Setup/Teardown
  beforeAll(() => {
    // Global setup
  });

  beforeEach(() => {
    // Per-test setup
    jest.clearAllMocks();
  });

  // Group related tests
  describe('specific behavior', () => {
    it('should behave as expected', () => {
      // Arrange
      const props = {};

      // Act
      const result = action();

      // Assert
      expect(result).toBe(expected);
    });
  });
});
```

### Test Naming Conventions
- `describe` blocks should name the component, hook, or flow being tested (e.g., `describe('UserProfile')`).
- `it` blocks should clearly state the expected behavior or condition being tested (e.g., `it('should display an error message on failed login')`, `it('renders correctly when loading')`).

### Common Patterns
- Use data-testid for queries: `{component}-{element}-{state}`
- Mock timers for async: `jest.useFakeTimers()`
- Mock fetch/HTTP: `jest.spyOn(global, 'fetch')`
- Test loading states: `expect(loading).toBe(true)`
- Test error states: `expect(error).toBeTruthy()`
- Test empty states: `expect(list).toHaveLength(0)`

## Critical Testing Checklist
<critical>
- WRITE tests first (TDD when possible)
- MAINTAIN test isolation
- MOCK external dependencies
- USE descriptive test names
- FOLLOW AAA pattern
- CLEAN UP after tests
- TEST edge cases
- VERIFY error handling
- CHECK accessibility
- AVOID implementation details
</critical>

<version>1.0.0</version> 